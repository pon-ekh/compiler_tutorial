#!/usr/bin/python

import subprocess
import sys
import unittest

class TestSimpleAddition(unittest.TestCase):

    def perform_test(self, string, expected_output):
        proc = subprocess.Popen([TestSimpleAddition.executable],
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        output, _ = proc.communicate(input=string)
        exitcode = proc.wait()
        self.assertEqual(output, expected_output)
        self.assertEqual(exitcode, 0)

    def test_simple_1(self):
        self.perform_test('3 + 4', '7\n')

    def test_simple_2(self):
        self.perform_test('0 + 4', '4\n')

    def test_simple_3(self):
        self.perform_test('11 + 4', '15\n')

    def test_no_space(self):
        self.perform_test('11+4', '15\n')        

    def test_initial_space(self):
        self.perform_test('    11 + 4', '15\n')        

    def test_end_space(self):
        self.perform_test('11 + 4     ', '15\n')        
        
    def test_several_lines(self):
        self.perform_test('11 + 4\n5 + 3', '15\n8\n')

    def test_several_lines_with_end_space(self):
        self.perform_test('11 + 4     \n5 + 3', '15\n8\n')

    def test_empty_line(self):
        self.perform_test('11 + 4\n\n5 + 3', '15\n8\n')

    def test_error(self):
        self.perform_test('11 +', 'ERROR: Expected integer, remaining: \'\'\n')

    def test_error_2(self):
        self.perform_test('xyz + 4', 'ERROR: Expected integer, remaining: \'xyz + 4\'\n')

    def test_error_3(self):
        self.perform_test('11 + xyz', 'ERROR: Expected integer, remaining: \'xyz\'\n')

    def test_error_4(self):
        self.perform_test('11 + 5 xyz', 'ERROR: Expected end of line, remaining: \'xyz\'\n')

    def test_error_5(self):
        self.perform_test('11 5', 'ERROR: Expected +, remaining: \'5\'\n')
        
    def test_recover(self):
        self.perform_test('11 +\n5 + 3', 'ERROR: Expected integer, remaining: \'\'\n8\n')

    def test_recover_2(self):
        self.perform_test('11 + 4\n5 + \n12 + 4', '15\nERROR: Expected integer, remaining: \'\'\n16\n')    

if __name__ == '__main__':
    TestSimpleAddition.executable = sys.argv[1]
    unittest.main(argv=[sys.argv[0]] + sys.argv[2:])
